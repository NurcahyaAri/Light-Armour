#!/usr/bin/env node

'use strict'
/**
 * Module dependencies.
 */

const Admin = require('../adminApp');
const Store = require('../storeApp');
const debug = require('debug')('niera:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const StorePort = normalizePort(process.env.PORT || '3000');
const AdminPort = normalizePort(process.env.PORT || '4000');
Admin.set('port', AdminPort);

Store.set('port', StorePort);
/**
 * Create HTTP server.
 */

const StoreServer = http.createServer(Store);
const AdminServer = http.createServer(Admin);
/**
 * Listen on provided port, on all network interfaces.
 */

StoreServer.listen(StorePort);
StoreServer.on('error', onError);
StoreServer.on('listening', onListening);

AdminServer.listen(AdminPort);
AdminServer.on('error', onError);
AdminServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let StorePort = parseInt(val, 10);

  if (isNaN(StorePort)) {
    // named pipe
    return val;
  }

  if (StorePort >= 0) {
    // port number
    return StorePort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof StorePort === 'string'
    ? 'Pipe ' + StorePort
    : 'Port ' + StorePort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = StoreServer.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
